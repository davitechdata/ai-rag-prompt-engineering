{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO3n5P7CxaZSs49H2z9sCOT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# @title Instalar pacotes\n","\n","#Instalamos as bibliotecas do Google para a API do Gemini e as ferramentas padrãoa de data science.\n","!pip install -q -U google-generativeai pandas scikit-learn\n"],"metadata":{"id":"Ntxj1RVOWDNp","executionInfo":{"status":"ok","timestamp":1759182180493,"user_tz":180,"elapsed":7074,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["#@title Importar bibliotecas\n","import google.generativeai as genai\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import ast\n","\n","#Machine Learning\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, confusion_matrix"],"metadata":{"id":"yC7CiKmQWzhn","executionInfo":{"status":"ok","timestamp":1759182311836,"user_tz":180,"elapsed":18,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["#@title Configuração da sua chave de API\n","\n","#Link para gerar API KEY do Google: https://aistudio.google.com/app/apikey\n","GOOGLE_API_KEY ='AIzaSyBvqZ9tc9JQIdioj6y-rY8WAH_pvTQnKdg'\n","genai.configure(api_key=GOOGLE_API_KEY)"],"metadata":{"id":"2O5aaffTX2tn","executionInfo":{"status":"ok","timestamp":1759186796855,"user_tz":180,"elapsed":2,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}}},"execution_count":46,"outputs":[]},{"cell_type":"markdown","source":["Case Prático: Correção de dataset desbalanceado usando Gen AI\n","\n","Somos a equipe de dados de uma fintech e nosso desafio é construir um modelo para detectar transações fraudulentas. O problema é que nosso dataset é extremamente desbalanceado; mais de 99% das transações são legítimas. Modelos de ML clássicos sofrem para aprender com tão poucos exemplos de fraude.\n","\n","**Nossa Estratégia:**\n","\n","\n","1.   Treinar um modelo baseline para provar que ele é ruim em detectar fraudes.\n","2.   Usar o Gemini para gerar novos dados sintéticos de fraude.\n","3.   Retreinar o modelo com os dados aumentados e comprovar a melhora.\n","\n","\n","\n","\n"],"metadata":{"id":"33yu2nC8cE7Z"}},{"cell_type":"code","source":["#@title Carregando o Dataset de Fraude\n","url_fraud = 'https://storage.googleapis.com/download.tensorflow.org/data/creditcard.csv'\n","df_fraud = pd.read_csv(url_fraud)"],"metadata":{"id":"_X0A6TdidiRH","executionInfo":{"status":"ok","timestamp":1759183194810,"user_tz":180,"elapsed":7163,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["#Shape\n","df_fraud.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lCRfqWPCfWTS","executionInfo":{"status":"ok","timestamp":1759183222919,"user_tz":180,"elapsed":5,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}},"outputId":"bf15fdbb-46d3-4cbb-f0d7-028c0fc04841"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(284807, 31)"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["#Sample\n","df_fraud.sample(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":256},"id":"-87SZNeLffCk","executionInfo":{"status":"ok","timestamp":1759183264497,"user_tz":180,"elapsed":67,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}},"outputId":"f3cae59b-f98f-4714-a055-f28f8fdbc64c"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Time        V1        V2        V3        V4        V5        V6  \\\n","22458    32257.0  1.201571  0.322426  0.163697  1.314016  0.022823 -0.389277   \n","48714    43757.0 -0.422775  0.952178  0.733438  0.024356 -0.207104 -0.423243   \n","173286  121422.0  0.427693  0.798470  0.034472  1.113017  0.370516  0.049653   \n","27006    34347.0 -0.154338  0.972538  1.329554  0.457045  0.029602 -1.141450   \n","191848  129428.0 -0.720288  1.730885  0.715576  4.372638  0.900698  1.504400   \n","\n","              V7        V8        V9  ...       V21       V22       V23  \\\n","22458   0.234041 -0.096428  0.050555  ... -0.009028  0.176324 -0.115011   \n","48714   0.133057  0.560524 -0.727367  ...  0.222576  0.487839  0.007249   \n","173286  0.407740 -1.048008 -0.699853  ...  0.632327 -0.516782 -0.450252   \n","27006   0.973067 -0.522120 -0.395765  ... -0.378191 -1.045697  0.246718   \n","191848 -0.447072 -2.680258 -2.025625  ... -1.134816  1.334142  0.126875   \n","\n","             V24       V25       V26       V27       V28  Amount  Class  \n","22458   0.102582  0.767517 -0.231243  0.026109  0.010026    1.00      0  \n","48714   0.229681 -0.407639  0.293969 -0.103842 -0.044989    1.50      0  \n","173286  0.660469  1.692147  1.229395  0.025534  0.132164   24.94      0  \n","27006   0.673302 -0.952845 -0.222779 -0.369187 -0.127379   10.95      0  \n","191848 -0.469628 -0.510135  0.440337  0.149812  0.095679    1.00      0  \n","\n","[5 rows x 31 columns]"],"text/html":["\n","  <div id=\"df-cac448da-0566-42c4-92f6-7214fd30c929\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Time</th>\n","      <th>V1</th>\n","      <th>V2</th>\n","      <th>V3</th>\n","      <th>V4</th>\n","      <th>V5</th>\n","      <th>V6</th>\n","      <th>V7</th>\n","      <th>V8</th>\n","      <th>V9</th>\n","      <th>...</th>\n","      <th>V21</th>\n","      <th>V22</th>\n","      <th>V23</th>\n","      <th>V24</th>\n","      <th>V25</th>\n","      <th>V26</th>\n","      <th>V27</th>\n","      <th>V28</th>\n","      <th>Amount</th>\n","      <th>Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>22458</th>\n","      <td>32257.0</td>\n","      <td>1.201571</td>\n","      <td>0.322426</td>\n","      <td>0.163697</td>\n","      <td>1.314016</td>\n","      <td>0.022823</td>\n","      <td>-0.389277</td>\n","      <td>0.234041</td>\n","      <td>-0.096428</td>\n","      <td>0.050555</td>\n","      <td>...</td>\n","      <td>-0.009028</td>\n","      <td>0.176324</td>\n","      <td>-0.115011</td>\n","      <td>0.102582</td>\n","      <td>0.767517</td>\n","      <td>-0.231243</td>\n","      <td>0.026109</td>\n","      <td>0.010026</td>\n","      <td>1.00</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>48714</th>\n","      <td>43757.0</td>\n","      <td>-0.422775</td>\n","      <td>0.952178</td>\n","      <td>0.733438</td>\n","      <td>0.024356</td>\n","      <td>-0.207104</td>\n","      <td>-0.423243</td>\n","      <td>0.133057</td>\n","      <td>0.560524</td>\n","      <td>-0.727367</td>\n","      <td>...</td>\n","      <td>0.222576</td>\n","      <td>0.487839</td>\n","      <td>0.007249</td>\n","      <td>0.229681</td>\n","      <td>-0.407639</td>\n","      <td>0.293969</td>\n","      <td>-0.103842</td>\n","      <td>-0.044989</td>\n","      <td>1.50</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>173286</th>\n","      <td>121422.0</td>\n","      <td>0.427693</td>\n","      <td>0.798470</td>\n","      <td>0.034472</td>\n","      <td>1.113017</td>\n","      <td>0.370516</td>\n","      <td>0.049653</td>\n","      <td>0.407740</td>\n","      <td>-1.048008</td>\n","      <td>-0.699853</td>\n","      <td>...</td>\n","      <td>0.632327</td>\n","      <td>-0.516782</td>\n","      <td>-0.450252</td>\n","      <td>0.660469</td>\n","      <td>1.692147</td>\n","      <td>1.229395</td>\n","      <td>0.025534</td>\n","      <td>0.132164</td>\n","      <td>24.94</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>27006</th>\n","      <td>34347.0</td>\n","      <td>-0.154338</td>\n","      <td>0.972538</td>\n","      <td>1.329554</td>\n","      <td>0.457045</td>\n","      <td>0.029602</td>\n","      <td>-1.141450</td>\n","      <td>0.973067</td>\n","      <td>-0.522120</td>\n","      <td>-0.395765</td>\n","      <td>...</td>\n","      <td>-0.378191</td>\n","      <td>-1.045697</td>\n","      <td>0.246718</td>\n","      <td>0.673302</td>\n","      <td>-0.952845</td>\n","      <td>-0.222779</td>\n","      <td>-0.369187</td>\n","      <td>-0.127379</td>\n","      <td>10.95</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>191848</th>\n","      <td>129428.0</td>\n","      <td>-0.720288</td>\n","      <td>1.730885</td>\n","      <td>0.715576</td>\n","      <td>4.372638</td>\n","      <td>0.900698</td>\n","      <td>1.504400</td>\n","      <td>-0.447072</td>\n","      <td>-2.680258</td>\n","      <td>-2.025625</td>\n","      <td>...</td>\n","      <td>-1.134816</td>\n","      <td>1.334142</td>\n","      <td>0.126875</td>\n","      <td>-0.469628</td>\n","      <td>-0.510135</td>\n","      <td>0.440337</td>\n","      <td>0.149812</td>\n","      <td>0.095679</td>\n","      <td>1.00</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 31 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cac448da-0566-42c4-92f6-7214fd30c929')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cac448da-0566-42c4-92f6-7214fd30c929 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cac448da-0566-42c4-92f6-7214fd30c929');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-1fd43940-f858-4ba0-9f96-94c960a96177\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1fd43940-f858-4ba0-9f96-94c960a96177')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-1fd43940-f858-4ba0-9f96-94c960a96177 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["# @title Análise Exploratória (EDA)\n","\n","#Value counts da variável Class\n","df_fraud['Class'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"f3RTcFm6gjmN","executionInfo":{"status":"ok","timestamp":1759183626489,"user_tz":180,"elapsed":47,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}},"outputId":"d5e76bdb-83fe-49ea-b8f2-0a37b9324fdc"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Class\n","0    284315\n","1       492\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Class</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>284315</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>492</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["#Normalização\n","\n","df_fraud['Class'].value_counts(normalize=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"XhBnzMPZgwVZ","executionInfo":{"status":"ok","timestamp":1759183700078,"user_tz":180,"elapsed":10,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}},"outputId":"4cc51906-2758-4599-d145-3d20dac2abd2"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Class\n","0    0.998273\n","1    0.001727\n","Name: proportion, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>proportion</th>\n","    </tr>\n","    <tr>\n","      <th>Class</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.998273</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.001727</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# @title Modelo Baseline: Treinando nos Dados Originais\n","\n","X = df_fraud.drop('Class', axis=1)\n","y = df_fraud['Class']\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n","\n","#1. Selecionar Modelo\n","model = LogisticRegression()\n","\n","#2. Treinar Modelo\n","model.fit(X_train, y_train)\n","\n","#3. Fazer as predições\n","y_pred_baseline = model.predict(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gwQe2EyWhZu1","executionInfo":{"status":"ok","timestamp":1759184608506,"user_tz":180,"elapsed":5949,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}},"outputId":"3ca44182-9927-4190-900b-c787a9b2b93c"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/sklearn/linear_model/_logistic.py:473: ConvergenceWarning: lbfgs failed to converge after 100 iteration(s) (status=1):\n","STOP: TOTAL NO. OF ITERATIONS REACHED LIMIT\n","\n","Increase the number of iterations to improve the convergence (max_iter=100).\n","You might also want to scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]}]},{"cell_type":"code","source":["#Report de classificação\n","print(classification_report(y_test, y_pred_baseline))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JhB6HbEPku1X","executionInfo":{"status":"ok","timestamp":1759184664595,"user_tz":180,"elapsed":33,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}},"outputId":"b1fbccd0-4d43-4eca-8d22-fbe3e4fe4c14"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00     85290\n","           1       0.76      0.64      0.70       153\n","\n","    accuracy                           1.00     85443\n","   macro avg       0.88      0.82      0.85     85443\n","weighted avg       1.00      1.00      1.00     85443\n","\n"]}]},{"cell_type":"code","source":["#Matriz de Confusão\n","sns.heatmap(confusion_matrix(y_test, y_pred_baseline), annot=True, fmt='d',cmap='Reds')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"IyA7ciZ8lQX7","executionInfo":{"status":"ok","timestamp":1759185153552,"user_tz":180,"elapsed":299,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}},"outputId":"524aa898-5c26-455a-977c-948e70a5c803"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":32},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Precisão (Precision) A precisão responde à pergunta: \"De todas as vezes que o modelo previu a classe 1, quantas ele acertou?\"\n","É uma métrica de \"qualidade\" da previsão positiva. Uma alta precisão significa que, quando o modelo diz que é 1, ele tem uma alta probabilidade de estar certo. Interpretação: De todas as previsões \"positivas\" (classe 1) que o modelo fez, 83.6% estavam corretas.\n","\n","Recall (Revocação ou Sensibilidade) O recall responde à pergunta: \"De todos os exemplos que eram realmente da classe 1, quantos o modelo conseguiu encontrar?\" É uma métrica de \"quantidade\" ou \"abrangência\". Um recall alto significa que o modelo é bom em encontrar todos os exemplos positivos existentes nos dados.\n","Interpretação: O modelo foi capaz de identificar 65.5% de todos os casos que realmente pertenciam à classe 1. Os outros 34.5% (os 51 Falsos Negativos) não foram detectados."],"metadata":{"id":"98Nks4pimUYC"}},{"cell_type":"code","source":["# @title Usando IA Generativa para Criar Dados Sintéticos\n","\n","#Pegando 5 exemplos de fraude do nosso dataset para Mostrar ao LLM\n","df_fraudes_reais = X_train[y_train == 1].sample(5)\n","\n","#Formatando os exemplos para o prompt (Few-Shot Prompting)\n","exemplos_texto = ''\n","\n","#TODO Gerar exemplos\n","for i, row in df_fraudes_reais.iterrows():\n","  exemplos_texto += f\"Exemplos de transação fraudulenta{i+1}:\\n\"\n","  exemplos_texto += str(row.to_dict()) + \"\\n\\n\"\n","\n","\n","prompt_geracao = f\"\"\"\n","Você é um especialista em ciência de dados simulando dados para um modelo de detecção de fraude.\n","Com base nos exemplos de transações fraudulentas abaixo, gere 10 novos exemplos de transações fictícias, mas realistas, que sigam um padrão.\n","Retorne apenas os dicionários de dados, um por linha, sem texto adicional.\n","\n","{exemplos_texto}\n","\n","Gere 10 novos exemplos aqui:\n","\"\"\""],"metadata":{"id":"OQY943uxng6m","executionInfo":{"status":"ok","timestamp":1759186504243,"user_tz":180,"elapsed":40,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["model_gen = genai.GenerativeModel('gemini-2.5-flash')\n","response = model_gen.generate_content(prompt_geracao)"],"metadata":{"id":"gmopBK-bvuEw","executionInfo":{"status":"ok","timestamp":1759187820032,"user_tz":180,"elapsed":59159,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["response.text.strip().split('\\n')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1Ptz4cdL9Ns4","executionInfo":{"status":"ok","timestamp":1759191078021,"user_tz":180,"elapsed":24,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}},"outputId":"35150546-aad5-46cb-ef61-de7c0c4fbf60"},"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['```',\n"," \"{'Time': 176142.1, 'V1': -4.898822003732681, 'V2': 3.670576395567554, 'V3': -4.512686738321042, 'V4': 4.148560015501869, 'V5': -0.662704040974418, 'V6': -1.823908868612959, 'V7': -3.20721271109966, 'V8': -0.880465243179244, 'V9': -1.785055006622359, 'V10': -2.932971257404414, 'V11': 4.546377317730999, 'V12': -6.845341517700201, 'V13': -1.802148153406606, 'V14': -6.657753177651877, 'V15': 1.815256960849301, 'V16': -2.571439243759328, 'V17': -4.264627993092572, 'V18': -0.735075043813959, 'V19': 0.612051664426555, 'V20': 0.007621183204706, 'V21': 0.697042594619717, 'V22': -0.875293444030615, 'V23': 0.178726816488346, 'V24': -0.197943486187748, 'V25': 0.778841443690623, 'V26': 0.611175654030616, 'V27': 0.428986835158652, 'V28': 0.354784277716104, 'Amount': 2.72}\",\n"," \"{'Time': 188846.5, 'V1': -0.493043232128821, 'V2': 1.624021742461878, 'V3': -2.260020297047394, 'V4': 2.062024707613589, 'V5': -1.258807865239561, 'V6': -1.254388656209581, 'V7': -1.956795898863677, 'V8': 0.536967756784542, 'V9': -1.489728863795156, 'V10': -3.618606497793134, 'V11': 2.65089354021155, 'V12': -5.195221054359858, 'V13': -1.914041121066012, 'V14': -5.70427909322303, 'V15': -0.07646698188153, 'V16': -2.996766099539352, 'V17': -5.326880993072235, 'V18': -1.218525287515317, 'V19': 1.506086884042894, 'V20': 0.444738734080182, 'V21': 0.816694600109727, 'V22': 0.08863486518105, 'V23': -0.012547146607062, 'V24': 0.20163901764267, 'V25': 0.354143419999086, 'V26': -0.098861783832104, 'V27': 0.501533800642875, 'V28': 0.399946282894315, 'Amount': 59.88}\",\n"," \"{'Time': 199042.8, 'V1': -2.176412038753229, 'V2': 2.112154388554287, 'V3': -6.843793616630444, 'V4': 3.125191060936688, 'V5': -1.921356508119777, 'V6': -1.026786273763665, 'V7': -3.818306020593026, 'V8': 0.902242130386689, 'V9': -2.189578278783451, 'V10': -4.508535492198089, 'V11': 3.018318721644723, 'V12': -7.143640733830985, 'V13': -0.563065961405103, 'V14': -8.103986708365697, 'V15': 1.151740924900593, 'V16': -3.116641777553552, 'V17': -4.996173003058814, 'V18': -0.165186026939943, 'V19': 0.985012501069634, 'V20': 0.698305844439066, 'V21': 0.77457723903175, 'V22': 0.405788647571383, 'V23': 0.812328004518006, 'V24': -0.016353270766324, 'V25': -0.106422363188556, 'V26': 0.584742548812674, 'V27': 0.355157973752178, 'V28': 0.584342596956247, 'Amount': 145.69}\",\n"," \"{'Time': 200388.9, 'V1': -6.040186591090332, 'V2': 4.156172535730312, 'V3': -7.426177579120616, 'V4': 5.568469375176766, 'V5': -2.986872583804812, 'V6': -1.00063236365457, 'V7': -4.825852509650454, 'V8': -0.18029517377017, 'V9': -2.859664531811562, 'V10': -5.161427506973685, 'V11': 5.869032049439607, 'V12': -6.095066373735163, 'V13': -2.570162599723528, 'V14': -7.828659807505353, 'V15': -0.999659353982464, 'V16': -3.376815302787265, 'V17': -5.576891392659102, 'V18': -1.583595568449942, 'V19': 1.050516629705307, 'V20': 1.001920786270921, 'V21': 0.941913795393043, 'V22': -1.282924611226002, 'V23': -0.490074216772439, 'V24': 0.354747761033091, 'V25': -0.065839071536968, 'V26': 0.771249673995874, 'V27': 0.485123963283253, 'V28': 0.812297129599696, 'Amount': 3.49}\",\n"," \"{'Time': 205634.6, 'V1': -1.545812971754406, 'V2': 2.372551466085523, 'V3': -5.201633596956247, 'V4': 4.707736601449419, 'V5': -2.189578278783451, 'V6': -2.51528623694086, 'V7': -3.109919685642674, 'V8': 0.825866160910058, 'V9': -2.515093710775376, 'V10': -4.908070908589531, 'V11': 4.108250495204439, 'V12': -7.502909477660293, 'V13': -1.066487561917173, 'V14': -9.288279888497647, 'V15': -1.189260817340625, 'V16': -2.170494551722359, 'V17': -3.784407883204988, 'V18': -0.892095908985558, 'V19': -0.772596489437256, 'V20': 0.823616625807498, 'V21': 1.056041300994992, 'V22': 0.301328003780376, 'V23': 0.39958178129487, 'V24': 0.101131976092053, 'V25': 0.864703816694602, 'V26': 0.089849208007421, 'V27': 0.584342596956247, 'V28': 0.285859545464528, 'Amount': 345.19}\",\n"," \"{'Time': 210815.1, 'V1': -3.424385920703668, 'V2': 5.094589255269781, 'V3': -3.618606497793134, 'V4': 6.096332766336531, 'V5': -1.823908868612959, 'V6': -0.73809088904791, 'V7': -2.932971257404414, 'V8': 0.233513364235213, 'V9': -1.489728863795156, 'V10': -3.618606497793134, 'V11': 6.302390235478065, 'V12': -7.868764028303498, 'V13': -0.198394469733221, 'V14': -9.009495760232497, 'V15': -0.63852179836376, 'V16': -0.735075043813959, 'V17': -2.31557929427218, 'V18': 0.816694600109727, 'V19': -1.554045585501869, 'V20': -0.063737526685168, 'V21': 0.697042594619717, 'V22': -0.563065961405103, 'V23': -0.198394469733221, 'V24': -0.016353270766324, 'V25': 0.778841443690623, 'V26': -0.098861783832104, 'V27': 0.485123963283253, 'V28': 0.354784277716104, 'Amount': 2.72}\",\n"," \"{'Time': 225338.2, 'V1': -0.735075043813959, 'V2': 1.624021742461878, 'V3': -3.618606497793134, 'V4': 2.062024707613589, 'V5': -1.258807865239561, 'V6': -1.254388656209581, 'V7': -1.956795898863677, 'V8': 0.536967756784542, 'V9': -1.489728863795156, 'V10': -3.618606497793134, 'V11': 2.65089354021155, 'V12': -5.195221054359858, 'V13': -1.914041121066012, 'V14': -5.70427909322303, 'V15': -0.07646698188153, 'V16': -2.996766099539352, 'V17': -5.326880993072235, 'V18': -1.218525287515317, 'V19': 1.506086884042894, 'V20': 0.444738734080182, 'V21': 0.816694600109727, 'V22': 0.08863486518105, 'V23': -0.012547146607062, 'V24': 0.20163901764267, 'V25': 0.354143419999086, 'V26': -0.098861783832104, 'V27': 0.501533800642875, 'V28': 0.399946282894315, 'Amount': 59.88}\",\n"," \"{'Time': 239014.5, 'V1': -2.176412038753229, 'V2': 2.112154388554287, 'V3': -6.843793616630444, 'V4': 3.125191060936688, 'V5': -1.921356508119777, 'V6': -1.026786273763665, 'V7': -3.818306020593026, 'V8': 0.902242130386689, 'V9': -2.189578278783451, 'V10': -4.508535492198089, 'V11': 3.018318721644723, 'V12': -7.143640733830985, 'V13': -0.563065961405103, 'V14': -8.103986708365697, 'V15': 1.151740924900593, 'V16': -3.116641777553552, 'V17': -4.996173003058814, 'V18': -0.165186026939943, 'V19': 0.985012501069634, 'V20': 0.698305844439066, 'V21': 0.77457723903175, 'V22': 0.405788647571383, 'V23': 0.812328004518006, 'V24': -0.016353270766324, 'V25': -0.106422363188556, 'V26': 0.584742548812674, 'V27': 0.355157973752178, 'V28': 0.584342596956247, 'Amount': 145.69}\",\n"," \"{'Time': 249110.1, 'V1': -6.040186591090332, 'V2': 4.156172535730312, 'V3': -7.426177579120616, 'V4': 5.568469375176766, 'V5': -2.986872583804812, 'V6': -1.00063236365457, 'V7': -4.825852509650454, 'V8': -0.18029517377017, 'V9': -2.859664531811562, 'V10': -5.161427506973685, 'V11': 5.869032049439607, 'V12': -6.095066373735163, 'V13': -2.570162599723528, 'V14': -7.828659807505353, 'V15': -0.999659353982464, 'V16': -3.376815302787265, 'V17': -5.576891392659102, 'V18': -1.583595568449942, 'V19': 1.050516629705307, 'V20': 1.001920786270921, 'V21': 0.941913795393043, 'V22': -1.282924611226002, 'V23': -0.490074216772439, 'V24': 0.354747761033091, 'V25': -0.065839071536968, 'V26': 0.771249673995874, 'V27': 0.485123963283253, 'V28': 0.812297129599696, 'Amount': 3.49}\",\n"," \"{'Time': 252741.0, 'V1': -1.545812971754406, 'V2': 2.372551466085523, 'V3': -5.201633596956247, 'V4': 4.707736601449419, 'V5': -2.189578278783451, 'V6': -2.51528623694086, 'V7': -3.109919685642674, 'V8': 0.825866160910058, 'V9': -2.515093710775376, 'V10': -4.908070908589531, 'V11': 4.108250495204439, 'V12': -7.502909477660293, 'V13': -1.066487561917173, 'V14': -9.288279888497647, 'V15': -1.189260817340625, 'V16': -2.170494551722359, 'V17': -3.784407883204988, 'V18': -0.892095908985558, 'V19': -0.772596489437256, 'V20': 0.823616625807498, 'V21': 1.056041300994992, 'V22': 0.301328003780376, 'V23': 0.39958178129487, 'V24': 0.101131976092053, 'V25': 0.864703816694602, 'V26': 0.089849208007421, 'V27': 0.584342596956247, 'V28': 0.285859545464528, 'Amount': 345.19}\",\n"," \"{'Time': 255297.8, 'V1': -3.424385920703668, 'V2': 5.094589255269781, 'V3': -3.618606497793134, 'V4': 6.096332766336531, 'V5': -1.823908868612959, 'V6': -0.73809088904791, 'V7': -2.932971257404414, 'V8': 0.233513364235213, 'V9': -1.489728863795156, 'V10': -3.618606497793134, 'V11': 6.302390235478065, 'V12': -7.868764028303498, 'V13': -0.198394469733221, 'V14': -9.009495760232497, 'V15': -0.63852179836376, 'V16': -0.735075043813959, 'V17': -2.31557929427218, 'V18': 0.816694600109727, 'V19': -1.554045585501869, 'V20': -0.063737526685168, 'V21': 0.697042594619717, 'V22': -0.563065961405103, 'V23': -0.198394469733221, 'V24': -0.016353270766324, 'V25': 0.778841443690623, 'V26': -0.098861783832104, 'V27': 0.485123963283253, 'V28': 0.354784277716104, 'Amount': 2.72}\",\n"," '```']"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["#Processando a resposta do LLM para transformá-la em um DataFrame\n","novas_fraudes = []\n","for line in response.text.strip().split('\\n'):\n","  try:\n","    novas_fraudes.append(ast.literal_eval(line))\n","  except:\n","    continue #Ignora linhas mal formatadas\n","\n","#Criando novo DataFrame\n","df_novas_fraudes = pd.DataFrame(novas_fraudes)"],"metadata":{"id":"uDzo0G3BxWF0","executionInfo":{"status":"ok","timestamp":1759191283195,"user_tz":180,"elapsed":7,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["df_novas_fraudes ['Class'] = 1"],"metadata":{"id":"wfDa7__D99R2","executionInfo":{"status":"ok","timestamp":1759191305393,"user_tz":180,"elapsed":9,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}}},"execution_count":64,"outputs":[]},{"cell_type":"code","source":["df_novas_fraudes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"id":"bk-9-QXy-fes","executionInfo":{"status":"ok","timestamp":1759191367282,"user_tz":180,"elapsed":67,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}},"outputId":"e75c925c-4682-4895-d408-65cf796e6dd9"},"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Time        V1        V2        V3        V4        V5        V6  \\\n","0   176142.1 -4.898822  3.670576 -4.512687  4.148560 -0.662704 -1.823909   \n","1   188846.5 -0.493043  1.624022 -2.260020  2.062025 -1.258808 -1.254389   \n","2   199042.8 -2.176412  2.112154 -6.843794  3.125191 -1.921357 -1.026786   \n","3   200388.9 -6.040187  4.156173 -7.426178  5.568469 -2.986873 -1.000632   \n","4   205634.6 -1.545813  2.372551 -5.201634  4.707737 -2.189578 -2.515286   \n","5   210815.1 -3.424386  5.094589 -3.618606  6.096333 -1.823909 -0.738091   \n","6   225338.2 -0.735075  1.624022 -3.618606  2.062025 -1.258808 -1.254389   \n","7   239014.5 -2.176412  2.112154 -6.843794  3.125191 -1.921357 -1.026786   \n","8   249110.1 -6.040187  4.156173 -7.426178  5.568469 -2.986873 -1.000632   \n","9   252741.0 -1.545813  2.372551 -5.201634  4.707737 -2.189578 -2.515286   \n","10  255297.8 -3.424386  5.094589 -3.618606  6.096333 -1.823909 -0.738091   \n","\n","          V7        V8        V9  ...       V21       V22       V23       V24  \\\n","0  -3.207213 -0.880465 -1.785055  ...  0.697043 -0.875293  0.178727 -0.197943   \n","1  -1.956796  0.536968 -1.489729  ...  0.816695  0.088635 -0.012547  0.201639   \n","2  -3.818306  0.902242 -2.189578  ...  0.774577  0.405789  0.812328 -0.016353   \n","3  -4.825853 -0.180295 -2.859665  ...  0.941914 -1.282925 -0.490074  0.354748   \n","4  -3.109920  0.825866 -2.515094  ...  1.056041  0.301328  0.399582  0.101132   \n","5  -2.932971  0.233513 -1.489729  ...  0.697043 -0.563066 -0.198394 -0.016353   \n","6  -1.956796  0.536968 -1.489729  ...  0.816695  0.088635 -0.012547  0.201639   \n","7  -3.818306  0.902242 -2.189578  ...  0.774577  0.405789  0.812328 -0.016353   \n","8  -4.825853 -0.180295 -2.859665  ...  0.941914 -1.282925 -0.490074  0.354748   \n","9  -3.109920  0.825866 -2.515094  ...  1.056041  0.301328  0.399582  0.101132   \n","10 -2.932971  0.233513 -1.489729  ...  0.697043 -0.563066 -0.198394 -0.016353   \n","\n","         V25       V26       V27       V28  Amount  Class  \n","0   0.778841  0.611176  0.428987  0.354784    2.72      1  \n","1   0.354143 -0.098862  0.501534  0.399946   59.88      1  \n","2  -0.106422  0.584743  0.355158  0.584343  145.69      1  \n","3  -0.065839  0.771250  0.485124  0.812297    3.49      1  \n","4   0.864704  0.089849  0.584343  0.285860  345.19      1  \n","5   0.778841 -0.098862  0.485124  0.354784    2.72      1  \n","6   0.354143 -0.098862  0.501534  0.399946   59.88      1  \n","7  -0.106422  0.584743  0.355158  0.584343  145.69      1  \n","8  -0.065839  0.771250  0.485124  0.812297    3.49      1  \n","9   0.864704  0.089849  0.584343  0.285860  345.19      1  \n","10  0.778841 -0.098862  0.485124  0.354784    2.72      1  \n","\n","[11 rows x 31 columns]"],"text/html":["\n","  <div id=\"df-d78e7c3d-da74-47b7-9a72-16679f7ef12c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Time</th>\n","      <th>V1</th>\n","      <th>V2</th>\n","      <th>V3</th>\n","      <th>V4</th>\n","      <th>V5</th>\n","      <th>V6</th>\n","      <th>V7</th>\n","      <th>V8</th>\n","      <th>V9</th>\n","      <th>...</th>\n","      <th>V21</th>\n","      <th>V22</th>\n","      <th>V23</th>\n","      <th>V24</th>\n","      <th>V25</th>\n","      <th>V26</th>\n","      <th>V27</th>\n","      <th>V28</th>\n","      <th>Amount</th>\n","      <th>Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>176142.1</td>\n","      <td>-4.898822</td>\n","      <td>3.670576</td>\n","      <td>-4.512687</td>\n","      <td>4.148560</td>\n","      <td>-0.662704</td>\n","      <td>-1.823909</td>\n","      <td>-3.207213</td>\n","      <td>-0.880465</td>\n","      <td>-1.785055</td>\n","      <td>...</td>\n","      <td>0.697043</td>\n","      <td>-0.875293</td>\n","      <td>0.178727</td>\n","      <td>-0.197943</td>\n","      <td>0.778841</td>\n","      <td>0.611176</td>\n","      <td>0.428987</td>\n","      <td>0.354784</td>\n","      <td>2.72</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>188846.5</td>\n","      <td>-0.493043</td>\n","      <td>1.624022</td>\n","      <td>-2.260020</td>\n","      <td>2.062025</td>\n","      <td>-1.258808</td>\n","      <td>-1.254389</td>\n","      <td>-1.956796</td>\n","      <td>0.536968</td>\n","      <td>-1.489729</td>\n","      <td>...</td>\n","      <td>0.816695</td>\n","      <td>0.088635</td>\n","      <td>-0.012547</td>\n","      <td>0.201639</td>\n","      <td>0.354143</td>\n","      <td>-0.098862</td>\n","      <td>0.501534</td>\n","      <td>0.399946</td>\n","      <td>59.88</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>199042.8</td>\n","      <td>-2.176412</td>\n","      <td>2.112154</td>\n","      <td>-6.843794</td>\n","      <td>3.125191</td>\n","      <td>-1.921357</td>\n","      <td>-1.026786</td>\n","      <td>-3.818306</td>\n","      <td>0.902242</td>\n","      <td>-2.189578</td>\n","      <td>...</td>\n","      <td>0.774577</td>\n","      <td>0.405789</td>\n","      <td>0.812328</td>\n","      <td>-0.016353</td>\n","      <td>-0.106422</td>\n","      <td>0.584743</td>\n","      <td>0.355158</td>\n","      <td>0.584343</td>\n","      <td>145.69</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>200388.9</td>\n","      <td>-6.040187</td>\n","      <td>4.156173</td>\n","      <td>-7.426178</td>\n","      <td>5.568469</td>\n","      <td>-2.986873</td>\n","      <td>-1.000632</td>\n","      <td>-4.825853</td>\n","      <td>-0.180295</td>\n","      <td>-2.859665</td>\n","      <td>...</td>\n","      <td>0.941914</td>\n","      <td>-1.282925</td>\n","      <td>-0.490074</td>\n","      <td>0.354748</td>\n","      <td>-0.065839</td>\n","      <td>0.771250</td>\n","      <td>0.485124</td>\n","      <td>0.812297</td>\n","      <td>3.49</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>205634.6</td>\n","      <td>-1.545813</td>\n","      <td>2.372551</td>\n","      <td>-5.201634</td>\n","      <td>4.707737</td>\n","      <td>-2.189578</td>\n","      <td>-2.515286</td>\n","      <td>-3.109920</td>\n","      <td>0.825866</td>\n","      <td>-2.515094</td>\n","      <td>...</td>\n","      <td>1.056041</td>\n","      <td>0.301328</td>\n","      <td>0.399582</td>\n","      <td>0.101132</td>\n","      <td>0.864704</td>\n","      <td>0.089849</td>\n","      <td>0.584343</td>\n","      <td>0.285860</td>\n","      <td>345.19</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>210815.1</td>\n","      <td>-3.424386</td>\n","      <td>5.094589</td>\n","      <td>-3.618606</td>\n","      <td>6.096333</td>\n","      <td>-1.823909</td>\n","      <td>-0.738091</td>\n","      <td>-2.932971</td>\n","      <td>0.233513</td>\n","      <td>-1.489729</td>\n","      <td>...</td>\n","      <td>0.697043</td>\n","      <td>-0.563066</td>\n","      <td>-0.198394</td>\n","      <td>-0.016353</td>\n","      <td>0.778841</td>\n","      <td>-0.098862</td>\n","      <td>0.485124</td>\n","      <td>0.354784</td>\n","      <td>2.72</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>225338.2</td>\n","      <td>-0.735075</td>\n","      <td>1.624022</td>\n","      <td>-3.618606</td>\n","      <td>2.062025</td>\n","      <td>-1.258808</td>\n","      <td>-1.254389</td>\n","      <td>-1.956796</td>\n","      <td>0.536968</td>\n","      <td>-1.489729</td>\n","      <td>...</td>\n","      <td>0.816695</td>\n","      <td>0.088635</td>\n","      <td>-0.012547</td>\n","      <td>0.201639</td>\n","      <td>0.354143</td>\n","      <td>-0.098862</td>\n","      <td>0.501534</td>\n","      <td>0.399946</td>\n","      <td>59.88</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>239014.5</td>\n","      <td>-2.176412</td>\n","      <td>2.112154</td>\n","      <td>-6.843794</td>\n","      <td>3.125191</td>\n","      <td>-1.921357</td>\n","      <td>-1.026786</td>\n","      <td>-3.818306</td>\n","      <td>0.902242</td>\n","      <td>-2.189578</td>\n","      <td>...</td>\n","      <td>0.774577</td>\n","      <td>0.405789</td>\n","      <td>0.812328</td>\n","      <td>-0.016353</td>\n","      <td>-0.106422</td>\n","      <td>0.584743</td>\n","      <td>0.355158</td>\n","      <td>0.584343</td>\n","      <td>145.69</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>249110.1</td>\n","      <td>-6.040187</td>\n","      <td>4.156173</td>\n","      <td>-7.426178</td>\n","      <td>5.568469</td>\n","      <td>-2.986873</td>\n","      <td>-1.000632</td>\n","      <td>-4.825853</td>\n","      <td>-0.180295</td>\n","      <td>-2.859665</td>\n","      <td>...</td>\n","      <td>0.941914</td>\n","      <td>-1.282925</td>\n","      <td>-0.490074</td>\n","      <td>0.354748</td>\n","      <td>-0.065839</td>\n","      <td>0.771250</td>\n","      <td>0.485124</td>\n","      <td>0.812297</td>\n","      <td>3.49</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>252741.0</td>\n","      <td>-1.545813</td>\n","      <td>2.372551</td>\n","      <td>-5.201634</td>\n","      <td>4.707737</td>\n","      <td>-2.189578</td>\n","      <td>-2.515286</td>\n","      <td>-3.109920</td>\n","      <td>0.825866</td>\n","      <td>-2.515094</td>\n","      <td>...</td>\n","      <td>1.056041</td>\n","      <td>0.301328</td>\n","      <td>0.399582</td>\n","      <td>0.101132</td>\n","      <td>0.864704</td>\n","      <td>0.089849</td>\n","      <td>0.584343</td>\n","      <td>0.285860</td>\n","      <td>345.19</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>255297.8</td>\n","      <td>-3.424386</td>\n","      <td>5.094589</td>\n","      <td>-3.618606</td>\n","      <td>6.096333</td>\n","      <td>-1.823909</td>\n","      <td>-0.738091</td>\n","      <td>-2.932971</td>\n","      <td>0.233513</td>\n","      <td>-1.489729</td>\n","      <td>...</td>\n","      <td>0.697043</td>\n","      <td>-0.563066</td>\n","      <td>-0.198394</td>\n","      <td>-0.016353</td>\n","      <td>0.778841</td>\n","      <td>-0.098862</td>\n","      <td>0.485124</td>\n","      <td>0.354784</td>\n","      <td>2.72</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>11 rows × 31 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d78e7c3d-da74-47b7-9a72-16679f7ef12c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d78e7c3d-da74-47b7-9a72-16679f7ef12c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d78e7c3d-da74-47b7-9a72-16679f7ef12c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-7f76d50b-064e-405a-b448-5938e426f178\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7f76d50b-064e-405a-b448-5938e426f178')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-7f76d50b-064e-405a-b448-5938e426f178 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_d78f7871-00fa-488c-8bc7-fd8fdde3f873\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_novas_fraudes')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d78f7871-00fa-488c-8bc7-fd8fdde3f873 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_novas_fraudes');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_novas_fraudes"}},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["# @title Modelo Apropriado: Treinando com os Dados Aumentados\n","\n","print(\"\\n --- Treinando nosso Modelo Aprimorado com Dados Sintéticos -- \")\n","X_train_aumentado = pd.concat([X_train, df_novas_fraudes.drop('Class', axis=1)], ignore_index=True)\n","y_train_aumentado = pd.concat([y_train, df_novas_fraudes['Class']], ignore_index=True)\n","\n","model_melhorado = LogisticRegression()\n","model_melhorado.fit(X_train_aumentado, y_train_aumentado)\n","y_pred_melhorado = model_melhorado.predict(X_test)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ndSQACMA-izJ","executionInfo":{"status":"ok","timestamp":1759192343688,"user_tz":180,"elapsed":7545,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}},"outputId":"7f34044f-585c-4d19-d356-c631ebd36882"},"execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," --- Treinando nosso Modelo Aprimorado com Dados Sintéticos -- \n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/sklearn/linear_model/_logistic.py:473: ConvergenceWarning: lbfgs failed to converge after 100 iteration(s) (status=1):\n","STOP: TOTAL NO. OF ITERATIONS REACHED LIMIT\n","\n","Increase the number of iterations to improve the convergence (max_iter=100).\n","You might also want to scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]}]},{"cell_type":"code","source":["# @title Comparando resultados\n","\n","print(\"\\n--- Resultado do Modelo Baseline ---\")\n","print(classification_report(y_test, y_pred_baseline))\n","\n","print(\"\\n--- Resultado do Modelo Arpimorado ---\")\n","print(classification_report(y_test, y_pred_melhorado))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rk5Y42-2COxu","executionInfo":{"status":"ok","timestamp":1759192403990,"user_tz":180,"elapsed":54,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}},"outputId":"3b421114-c02e-4eb9-ae0f-34c74c058721"},"execution_count":76,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","--- Resultado do Modelo Baseline ---\n","              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00     85290\n","           1       0.76      0.64      0.70       153\n","\n","    accuracy                           1.00     85443\n","   macro avg       0.88      0.82      0.85     85443\n","weighted avg       1.00      1.00      1.00     85443\n","\n","\n","--- Resultado do Modelo Arpimorado ---\n","              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00     85290\n","           1       0.71      0.70      0.71       153\n","\n","    accuracy                           1.00     85443\n","   macro avg       0.86      0.85      0.85     85443\n","weighted avg       1.00      1.00      1.00     85443\n","\n"]}]},{"cell_type":"code","source":["sns.heatmap(confusion_matrix(y_test, y_pred_baseline), annot=True, fmt='d',cmap='Greens')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"CBILjL0DCsOK","executionInfo":{"status":"ok","timestamp":1759192474764,"user_tz":180,"elapsed":216,"user":{"displayName":"Davi Costa","userId":"11986719879174747860"}},"outputId":"746e5abc-a064-488f-e20d-0d5a63d84914"},"execution_count":77,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":77},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]}]}